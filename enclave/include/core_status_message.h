#pragma once

#include <map>
#include <string>

#include "include/core_status_codes.h"

struct CoreStatusInfo
{
    std::string name;
    std::string message;
};

const std::map<CoreStatusCode, CoreStatusInfo> core_status_map = {
    {kSuccess, {"Success", "Success!"}},
    {kInvalidInput, {"InvalidInput", "The input to the enclave is not valid"}},
    {kInvalidProofID,
     {"InvalidProofID", "The plaintext proof ID does not match the decrypted input"}},
    {kCertificateWriteError,
     {"CertificateWriteError", "Unable to write the server certificate chain to the output"}},
    {kDateTimeError, {"DateTimeError", "Error in a a date_time function"}},
    {kNoMatchingAccount, {"NoMatchingAccount", "Account match requested but no match found"}},
    {kBankInfoNotProvided, {"BankInfoNotProvided", "Bank does not return the requested info"}},
    {kNotProvisioned, {"NotProvisioner", "Enclave has not been provisioned with ED25519 key"}},
    {kIASFailed, {"IASFailed", "Call to Intel Attestation Service failed"}},
    {kDecodingError, {"DecodingError", "Error decoding string"}},
    {kIntegerOverflow, {"IntegerOverflow", "Integer value larger than MAX_SAFE_INTEGER"}},
    {kUIntUnderflow, {"UIntUnderflow", "Unsigned integer value less than 0"}},
    {kSGXError, {"SGXError", "Unknown/uncategorised SGX error"}},
    {kSGXBusy, {"SGXBusy", "The enclave is busy, try again later"}},
    {kSGXOutOfMemory, {"SGXOutOfMemory", "The enclave is out of memory"}},
    {kSGXInvalidParameter,
     {"SGXInvalidParameter", "Parameter provided to an SGX function is invalid"}},
    {kSGXEnclaveCrashed, {"SGXEnclaveCrashed", "The enclave has crashed"}},
    {kSGXStackOverrun, {"SGXStackOverrun", "A stack overrun has occured withing the enclave"}},
    {kSGXNDebugEnclave,
     {"SGXNDebugEnclave",
      "Enclave signed as a product enclave cannot be created as a debuggable enclave"}},
    {kSGXEnclaveError, {"SGXEnclaveError", "There is an issue with the enclave"}},
    {kSGXEnclaveInvalid, {"SGXEnclaveInvalid", "A component of the enclave is invalid"}},
    {kSGXCryptoError, {"SGXCryptoError", "Error in an SGX cryptographic component"}},
    {kSGXServiceError, {"SGXServiceError", "Error in an architectural enclave (AE) service"}},
    {kSGXMCError, {"SGXMCError", "Error in SGX monotonic counter"}},
    {kSGXPlatformError,
     {"SGXPlatformError", "There is an issue with the platform hosting the enclave"}},
    {kSGXPCLError, {"SGXPCLError", "There is an issue with the protected code loader"}},
    {kSGXFileError, {"SGXFileError", "There is an issue with file sealing"}},
    {kSGXAttestationError,
     {"SGXAttestationError", "There is an issue with the SGX attestation generation"}},
    {kSGXEnclaveFileAccess, {"SGXEnclaveFileAccess", "The enclave file cannot be opened"}},
    {kJSONParseError, {"JSONParseError", "Could not parse JSON"}},
    {kJSONIteratorError,
     {"JSONIteratorError", "JSON iterators passed to a function do not match expected symantics"}},
    {kJSONOutOfRangeError,
     {"JSONOutOfRangeError", "Expected range exceeded when acessing JSON values by index"}},
    {kJSONKeyError, {"JSONKeyError", "The given key was not found in the JSON object"}},
    {kJSONMultipleValuesError,
     {"JSONMultipleValuesError",
      "Multiple values are associated with this JSON key, should use get_all rather than get"}},
    {kJSONTypeError, {"JSONTypeError", "The JSON value type is not what is expected"}},
    {kHTTPRequestError, {"HTTPRequestError", "Sending a HTTP request failed"}},
    {kHTTPResponseParseError, {"HTTPResponseParseError", "Error parsing HTTP response"}},
    {kHTTPStatusNot200, {"HTTPStatusCodeNot200", "HTTP response status code not 200"}},
    {kHTTPStatus400, {"HTTPStatus400", "HTTP response status code 400: Bad request"}},
    {kHTTPStatus401, {"HTTPStatus401", "HTTP response status code 401: Unauthorized"}},
    {kHTTPStatus403, {"HTTPStatus403", "HTTP response status code 403: Forbidden"}},
    {kHTTPStatus404, {"HTTPStatus404", "HTTP response status code 404: Not found"}},
    {kHTTPStatus405, {"HTTPStatus405", "HTTP response status code 405: Method not allowed"}},
    {kHTTPStatus408, {"HTTPStatus408", "HTTP response status code 408: Request timeout"}},
    {kHTTPStatus4xx, {"HTTPStatus4xx", "HTTP response status code 4xx"}},
    {kHTTPStatus500, {"HTTPStatus500", "HTTP response status code 500: Internal server error"}},
    {kHTTPStatus503, {"HTTPStatus503", "HTTP response status code 503: Service unavailable"}},
    {kHTTPStatus5xx, {"HTTPStatus5xx", "HTTP response status code 5xx"}},
    {kKeyCreationError, {"KeyCreationError", "Error occured in enclave key generation"}},
    {kEncryptionError, {"EncryptionError", "Error occured while encrypting data"}},
    {kDecryptionError, {"DecryptionError", "Error occured while decrypting data"}},
    {kSigningError, {"SigningError", "Error occured while signing data"}},
    {kSigningDataFieldTooLong,
     {"SigningDataFieldTooLong", "One of the data field to be signed is longer than expected"}},
    {kECDHError, {"ECDHError", "Error in the ECDH process"}},
    {kSignatureVerificationError,
     {"SignatureVerificationError", "Error occured while verifying a signature"}},
    {kPlaidTokenDestructionError,
     {"PlaidTokenDestructionError", "Plaid access token destruction failed"}},
    {kPlaidApiError, {"PlaidApiError", "Plaid planned maintenance or internal server error"}},
    {kPlaidInstitutionError,
     {"PlaidInstitutionError", "Plaid error with requested financial institution"}},
    {kPlaidInstitutionNotSupported,
     {"PlaidInstitutionNotSupported", "Financial institution not supported by Plaid"}},
    {kPlaidInvalidInput,
     {"PlaidInvalidInput", "One or more values provided to Plaid is incorrect"}},
    {kPlaidInvalidRequest,
     {"PlaidInvalidRequest", "Plaid request is malformed and cannot be processed"}},
    {kPlaidInvalidResult, {"PlaidInvalidResult", "Plaid response is unusable"}},
    {kPlaidItemError, {"PlaidItemError", "Plaid item is invalid or not supported"}},
    {kPlaidOAuthError, {"PlaidOAuthError", "Error in Plaid OAuth authentication"}},
    {kPlaidRateLimitExceeded,
     {"PlaidRateLimitExceeded",
      "Excessive number of Plaid requests have been made in a short period of time"}},
    {kPlaidProductNotReady,
     {"PlaidProductNotReady", "Plaid product is not ready yet, try again later"}},
    {kPlaidOtherError, {"PlaidOtherError", "A Plaid error occured"}},
    {kClientConfigurationError,
     {"ClientConfigurationError", "Configuration of the HTTPSClient failed"}},
    {kClientCertificateParseError,
     {"ClientCertificateParseError", "Pinned certificates could not be parsed"}},
    {kClientConnectionError,
     {"ClientConnectionError", "Initial connection between client and server failed"}},
    {kClientHandshakeError,
     {"ClientHandshakeError",
      "TLS handshake with the server failed (most likely invalid certificate)"}},
    {kClientExpiredCertificate, {"ClientExpiredCertificate", "Server certificate is expired"}},
    {kClientReconnectionError,
     {"ClientReconnectionError", "Client failed to reconnect to the server"}},
    {kClientWriteError, {"ClientWriteError", "Client error writing HTTP request"}},
    {kClientReadError, {"ClientReadError", "Client error reading HTTP response"}},
    {kTrueLayerValidationError, {"TrueLayerValidationError", "Supplied parameters are not valid"}},
    {kTrueLayerDateRangeError,
     {"TrueLayerDateRangeError", "Provided date range invalid, change from and to parameters"}},
    {kTrueLayerDeprecatedProvider,
     {"TrueLayerDeprecatedProvider", "Provider is no longer supported"}},
    {kTrueLayerInvalidToken, {"TrueLayerInvalidToken", "Access token refresh required"}},
    {kTrueLayerAccessDenied, {"TrueLayerAccessDenied", "Access to user account no longer valid"}},
    {kTrueLayerSCAExceeded, {"TrueLayerSCAExceeded", "Access to specified endpoint has expired"}},
    {kTrueLayerAccountNotFound, {"TrueLayerAccountNotFound", "Account ID not found"}},
    {kTrueLayerRateLimitExceeded,
     {"TrueLayerRateLimitExceeded", "Requests exceeded the bank's rate limit"}},
    {kTrueLayerInvalidEndpoint, {"TrueLayerInvalidEndpoint", "Feature not supported by endpoint"}},
    {kTrueLayerInternalServerError,
     {"TrueLayerInternalServerError", "TrueLayer server error, retry later"}},
    {kTrueLayerProviderError, {"TrueLayerProviderError", "Error with provider, retry later"}},
    {kTrueLayerOtherError, {"TrueLayerOtherError", "A TrueLayer error occured"}},
    {kXeroInvalidCode, {"XeroInvalidCode", "The Xero access code is incorrect"}},
    {kXeroInvalidClientId, {"XeroInvalidClientId", "The Xero client ID or secret is incorrect"}},
    {kXeroInvalidRedirectUri, {"XeroInvalidRedirectUri", "Redirect URI doesn't match Xero app"}},
    {kXeroInvalidGrantType,
     {"XeroInvalidGrantType", "The Xero grant type is not authorization_code or refresh_token"}},
    {kXeroOtherError, {"XeroOtherError", "An unknown Xero error occured"}},
    {kCompaniesHouseAccessDenied,
     {"CompaniesHouseAccessDenied", "Companies House API access denied"}},
    {kCompaniesHouseCompanyProfileNotFound,
     {"CompaniesHouseCompanyProfileNotFound", "Company profile not found"}},
    {kCompaniesHouseCompanyInsolvenciesNotFound,
     {"CompaniesHouseCompanyInsolvenciesNotFound", "Company insolvencies not found"}},
    {kCompaniesHouseEtagMismatch,
     {"CompaniesHouseEtagMismatch", "Update made to object by another user during session"}},
    {kCompaniesHouseInvalidAuthorizationHeader,
     {"CompaniesHouseInvalidAuthorizationHeader", "Invalid authorization header"}},
    {kCompaniesHouseInvalidHttpMethod,
     {"CompaniesHouseInvalidHttpMethod", "Access denied for HTTP method"}},
    {kCompaniesHouseInvalidClientId,
     {"CompaniesHouseInvalidClientId", "Invalid Companies House clinet ID"}},
    {kCompaniesHouseNoJsonProvided, {"CompaniesHouseNoJsonProvided", "No JSON payload provided"}},
    {kCompaniesHouseNotAuthorisedForCompany,
     {"CompaniesHouseNotAuthorisedForCompany", "Not authorised to file for this company"}},
    {kCompaniesHouseTransactionNotOpen,
     {"CompaniesHouseTransactionNotOpen", "Transaction is not open"}},
    {kCompaniesHouseTransactionDoesNotExist,
     {"CompaniesHouseTransactionDoesNotExist", "Transaction does not exist"}},
    {kCompaniesHouseUserTransactionsNotFound,
     {"CompaniesHouseUserTransactionsNotFound", "No transactions found for this user"}},
    {kCompaniesHouseUnauthorised, {"CompaniesHouseUnauthorised", "Unauthorised"}},
    {kCompaniesHouseOtherError,
     {"CompaniesHouseOtherError", "An unknown Companies House error occured"}},
    {kOnfidoBadRequest, {"OnfidoBadRequest", "Bad request"}},
    {kOnfidoIncorrectBaseUrl, {"OnfidoIncorrectBaseUrl", "Incorrect base url"}},
    {kOnfidoAuthorizationError, {"OnfidoAuthorizationError", "Authorization error"}},
    {kOnfidoUserAuthorizationError, {"OnfidoUserAuthorizationError", "User authorization error"}},
    {kOnfidoBadReferrer, {"OnfidoBadReferrer", "Bad referrer"}},
    {kOnfidoExpiredToken, {"OnfidoExpiredToken", "Expired token"}},
    {kOnfidoAccountDisabled, {"OnfidoAccountDisabled", "Account disabled"}},
    {kOnfidoTrialLimitsReached, {"OnfidoTrialLimitsReached", "Trial limits reached"}},
    {kOnfidoResourceNotFound, {"OnfidoResourceNotFound", "Resource not found"}},
    {kOnfidoGone, {"OnfidoGone", "Gone"}},
    {kOnfidoValidationError, {"OnfidoValidationError", "Validation error"}},
    {kOnfidoMissingBillingInfo, {"OnfidoMissingBillingInfo", "Missing billing info"}},
    {kOnfidoMissingDocuments, {"OnfidoMissingDocuments", "Missing documents"}},
    {kOnfidoInvalidReportsNames, {"OnfidoInvalidReportsNames", "Invalid reports names"}},
    {kOnfidoMissingIdNumbers, {"OnfidoMissingIdNumbers", "Missing id numbers"}},
    {kOnfidoReportNamesBlank, {"OnfidoReportNamesBlank", "Report names blank"}},
    {kOnfidoReportNamesFormat, {"OnfidoReportNamesFormat", "Report names format"}},
    {kOnfidoCheckTypeDeprecated, {"OnfidoCheckTypeDeprecated", "Check type deprecated"}},
    {kOnfidoDocumentIdsWithUnsupportedReport,
     {"OnfidoDocumentIdsWithUnsupportedReport", "Document ids with unsupported report"}},
    {kOnfidoFacialSimilarityPhotoWithoutDocument,
     {"OnfidoFacialSimilarityPhotoWithoutDocument", "Facial similarity photo without document"}},
    {kOnfidoFacialSimilarityVideoNotSupported,
     {"OnfidoFacialSimilarityVideoNotSupported", "Facial similarity video not supported"}},
    {kOnfidoFailedCheckRequirements,
     {"OnfidoFailedCheckRequirements", "Failed check requirements"}},
    {kOnfidoIncompleteChecks, {"OnfidoIncompleteChecks", "Incomplete checks"}},
    {kOnfidoRateLimit, {"OnfidoRateLimit", "Rate limit"}},
    {kOnfidoInternalServerError, {"OnfidoInternalServerError", "Internal server error"}},
    {kOnfidoOtherError, {"OnfidoOtherError", "Other error"}},
    {kInstagramOAuthException,
     {"InstagramOAuthException", "Error while validating Instagram authorization code"}},
    {kInstagramIGApiException, {"InstagramIGApiException", "Instagram API exception"}},
    {kInstagramOtherError, {"InstagramOtherError", "Unhandled Instagram error"}},
    {kUnknownError, {"UnknownError", "An unknown error occured"}},
    {kMinimumBalanceInvalidInput,
     {"MinimumBalanceInvalidInput",
      "The input minimum balance does not match the decrypted input"}},
    {kMinimumBalanceRequirementsNotMet,
     {"MinimumBalanceRequirementsNotMet",
      "The account balance is less than the minimum value requested"}},
    {kConsistentIncomeInvalidInput,
     {"ConsistentIncomeInvalidInput",
      "The input consistent income does not match the decrypted input"}},
    {kConsistentIncomeRequirementsNotMet,
     {"ConsistentIncomeRequirementsNotMet",
      "The monthly income was below the minimum value requested for one or more of the previous "
      "three months"}}};

inline std::string core_status_message(CoreStatusCode status)
{
    std::string message = "(MissingErrorCode-" + std::to_string(static_cast<int>(status)) + ")";
    if (core_status_map.find(status) != core_status_map.end())
    {
        message = "(" + core_status_map.at(status).name + "-" +
                  std::to_string(static_cast<int>(status)) + ") " +
                  core_status_map.at(status).message;
    }
    return message;
}

inline std::string core_status_name(CoreStatusCode status)
{
    std::string name = "MissingErrorCode";
    if (core_status_map.find(status) != core_status_map.end())
    {
        name = core_status_map.at(status).name;
    }
    return name;
}
